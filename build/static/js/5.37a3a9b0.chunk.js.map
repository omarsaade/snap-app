{"version":3,"sources":["shared/components/UIElements/Map.js","snap/components/SnapItem.js","snap/components/SnapList.js","snap/pages/UserSnaps.js"],"names":["Map","props","SnapItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","secondary","className","center","coordinates","zoom","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","SnapList","items","length","map","snap","creator","location","onDeleteSnap","UserSnaps","loadedSnaps","setLoadedSnaps","loadedUser","setLoadedUser","useParams","useEffect","fetchUser","responseData","user","fetchSnaps","places","Avatar","name","motto","deletedSnapId","prevSnaps","filter"],"mappings":"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","file":"static/js/5.37a3a9b0.chunk.js","sourcesContent":["import \"./Map.css\";\n\nconst Map = (props) => {\n  return <div></div>;\n};\n\nexport default Map;\n","import { Fragment, useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./SnapItem.css\";\n\nconst SnapItem = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\n        \"DELETE\",\n        null,\n        { Authorization: \"Bearer \" + auth.token }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"snap-item__modal-content\"\n        footerClass=\"snap-item__modal-actions\"\n        footer={\n          <Button onClick={closeMapHandler} secondary>\n            Close\n          </Button>\n        }\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={14} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        contentClass=\"snap-item__modal-content\"\n        footerClass=\"snap-item__modal-actions\"\n        footer={\n          <Fragment>\n            <Button onClick={cancelDeleteHandler} inverse secondary>\n              Cancel\n            </Button>\n            <Button onClick={confirmDeleteHandler} danger secondary>\n              Delete\n            </Button>\n          </Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this snap? You can't undo this\n          action.\n        </p>\n      </Modal>\n      <Card className=\"snap-item\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <li>\n          <div className=\"snap-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              // src='http://localhost:8000/uploads/images/5d727aa0-48ca-11ec-96e6-258a17f4d3f7.jpeg'\n              alt={props.title}\n            />\n          </div>\n          <div className=\"center-flex-column small-gap\">\n            <div className=\"center-flex-column extra-small-gap snap-item__info\">\n              <p className=\"snap-item__info-title\">{props.title}</p>\n              <p className=\"snap-item__info-address\">{props.address}</p>\n              <p className=\"snap-item__info-description\">{props.description}</p>\n            </div>\n            <div className=\"center-flex-row tiny-gap snap-item__actions\">\n              <Button secondary>View on Map</Button>\n              {auth.userId === props.creatorId && (\n                <Button to={`/places/${props.id}`} secondary inverse>\n                  Edit\n                </Button>\n              )}\n              {auth.userId === props.creatorId && (\n                <Button onClick={showDeleteWarningHandler} secondary danger>\n                  Delete\n                </Button>\n              )}\n            </div>\n          </div>\n        </li>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default SnapItem;\n","import SnapItem from \"./SnapItem\";\nimport Button from \"../../shared/components/FormElements/Button\";\n\nimport \"../../index.css\";\nimport \"./SnapList.css\";\n\nconst SnapList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"center-flex-column medium-gap no-data-found\">\n        <p>No snaps found. Maybe create one?</p>\n        <Button to=\"/places/new\" secondary>\n          Create Snap\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"snaps-list\">\n      {props.items.map((snap) => (\n        <SnapItem\n          key={snap.id}\n          id={snap.id}\n          image={snap.image}\n          title={snap.title}\n          description={snap.description}\n          address={snap.address}\n          creatorId={snap.creator}\n          coordinates={snap.location}\n          onDelete={props.onDeleteSnap}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default SnapList;\n","import { Fragment, useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport SnapList from \"../components/SnapList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Avatar from \"../../shared/components/UIElements/Avatar\";\n\nimport \"./UserSnaps.css\";\n\nconst UserSnaps = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [loadedSnaps, setLoadedSnaps] = useState(false);\n  const [loadedUser, setLoadedUser] = useState();\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    // 1) FETCH USER\n    const fetchUser = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/${userId}`\n        );\n        setLoadedUser(responseData.user);\n      } catch (err) {}\n    };\n    fetchUser();\n\n    // 2) FETCH SNAPS\n    // http://localhost:8000/api/snaps/user/:uid\n    const fetchSnaps = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedSnaps(responseData.places);\n      } catch (err) {}\n    };\n    fetchSnaps();\n  }, [sendRequest, userId]);\n\n  const snapDeletedHandler = (deletedSnapId) => {\n    setLoadedSnaps((prevSnaps) =>\n      prevSnaps.filter((snap) => snap.id !== deletedSnapId)\n    );\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedUser && (\n        <div className=\"user-info center-flex-column extra-small-gap\">\n          <div className=\"user-info__image\">\n            <Avatar\n              image={`${process.env.REACT_APP_ASSET_URL}/${loadedUser.image}`}\n            />\n          </div>\n          <p className=\"user-info__name\">{loadedUser.name}</p>\n          <p className=\"user-info__text\">{loadedUser.motto}</p>\n        </div>\n      )}\n      {!isLoading && loadedSnaps && (\n        <SnapList items={loadedSnaps} onDeleteSnap={snapDeletedHandler} />\n      )}\n    </Fragment>\n  );\n};\n\nexport default UserSnaps;\n"],"sourceRoot":""}
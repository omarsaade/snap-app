{"version":3,"sources":["shared/components/UIElements/Map.js","snap/components/SnapItem.js","snap/components/SnapList.js","snap/pages/SearchSnaps.js"],"names":["Map","props","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","className","style","SnapItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","id","Authorization","token","onDelete","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","secondary","coordinates","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","SnapList","items","length","snap","creator","location","onDeleteSnap","SearchSnaps","loadedSnaps","setLoadedSnaps","searchState","setSearchState","history","useHistory","keyword","useParams","fetchSnaps","responseData","snaps","searchStateHandler","useCallback","onSubmit","event","preventDefault","push","validators","VALIDATOR_REQUIRE","errorText","onSearch"],"mappings":"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","file":"static/js/3.57a768ab.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport \"./Map.css\";\n\nconst Map = (props) => {\n  // use mapbox go to hashnode\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    // 1) Create a map\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    });\n    // 2) Place a marker\n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import { Fragment, useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./SnapItem.css\";\n\nconst SnapItem = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n\n    try {\n      await sendRequest(\n        `https://snap-app-omarsaade.onrender.com/api/snaps/${props.id}`,\n        \"DELETE\",\n        null,\n        { Authorization: \"Bearer \" + auth.token }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"snap-item__modal-content\"\n        footerClass=\"snap-item__modal-actions\"\n        footer={\n          <Button onClick={closeMapHandler} secondary>\n            Close\n          </Button>\n        }\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={14} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        contentClass=\"snap-item__modal-content\"\n        footerClass=\"snap-item__modal-actions\"\n        footer={\n          <Fragment>\n            <Button onClick={cancelDeleteHandler} inverse secondary>\n              Cancel\n            </Button>\n            <Button onClick={confirmDeleteHandler} danger secondary>\n              Delete\n            </Button>\n          </Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this snap? You can't undo this\n          action.\n        </p>\n      </Modal>\n      <Card className=\"snap-item\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <li>\n          <div className=\"snap-item__image\">\n            <img\n              src={`https://snap-app-omarsaade.onrender.com/${props.image}`}\n              // src='http://localhost:8000/uploads/images/5d727aa0-48ca-11ec-96e6-258a17f4d3f7.jpeg'\n              alt={props.title}\n            />\n          </div>\n          <div className=\"center-flex-column small-gap\">\n            <div className=\"center-flex-column extra-small-gap snap-item__info\">\n              <p className=\"snap-item__info-title\">{props.title}</p>\n              <p className=\"snap-item__info-address\">{props.address}</p>\n              <p className=\"snap-item__info-description\">{props.description}</p>\n            </div>\n            <div className=\"center-flex-row tiny-gap snap-item__actions\">\n              <Button onClick={openMapHandler} secondary>\n                View on Map\n              </Button>\n              {auth.userId === props.creatorId && (\n                <Button to={`/snaps/${props.id}`} secondary inverse>\n                  Edit\n                </Button>\n              )}\n              {auth.userId === props.creatorId && (\n                <Button onClick={showDeleteWarningHandler} secondary danger>\n                  Delete\n                </Button>\n              )}\n            </div>\n          </div>\n        </li>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default SnapItem;\n","import SnapItem from \"./SnapItem\";\nimport Button from \"../../shared/components/FormElements/Button\";\n\nimport \"../../index.css\";\nimport \"./SnapList.css\";\n\nconst SnapList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"center-flex-column medium-gap no-data-found\">\n        <p>No snaps found. Maybe create one?</p>\n        <Button to=\"/snaps/new\" secondary>\n          Create Snap\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"snaps-list\">\n      {props.items.map((snap) => (\n        <SnapItem\n          key={snap.id}\n          id={snap.id}\n          image={snap.image}\n          title={snap.title}\n          description={snap.description}\n          address={snap.address}\n          creatorId={snap.creator}\n          coordinates={snap.location}\n          onDelete={props.onDeleteSnap}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default SnapList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\n\nimport SearchBar from \"../../shared/components/Hero/SearchBar\";\nimport { VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport SnapList from \"../components/SnapList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nimport \"./SearchSnaps.css\";\n\nconst SearchSnaps = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [loadedSnaps, setLoadedSnaps] = useState();\n  const [searchState, setSearchState] = useState();\n\n  const history = useHistory();\n\n  // GET KEYWORD FROM URL\n  const keyword = useParams().keyword;\n\n  // RUN EACH RENDERING\n  useEffect(() => {\n    // DEFINE FETCH SNAPS FUNCTION\n    const fetchSnaps = async (keyword) => {\n      try {\n        const responseData = await sendRequest(\n          `https://snap-app-omarsaade.onrender.com/api/snaps/search/${keyword}`\n        );\n        setLoadedSnaps(responseData.snaps);\n      } catch (err) {}\n    };\n\n    // CLEAR POSSIBLE PREVIOUS ERROR\n    clearError();\n\n    // FETCH SNAPS MATCHING KEYWORD\n    if (keyword) fetchSnaps(keyword);\n  }, [keyword, sendRequest, clearError]);\n\n  // SUBMIT SEARCH FORM\n  const searchSubmitHandler = (event) => {\n    event.preventDefault();\n\n    // REDIRECT TO LATEST SEARCH STATE\n    history.push(`/search/${searchState}`);\n  };\n\n  const searchStateHandler = useCallback((keyword) => {\n    setSearchState(keyword);\n  }, []);\n\n  return (\n    <div className=\"center-flex-column\">\n      <div className=\"center-text search-hero center-flex-column extra-small-gap\">\n        <p className=\"search-hero-text\">\n          Here is your searching result for\n          {!isLoading && (\n            <span className=\"search-hero-keyword\">{` ${\n              keyword || searchState\n            }`}</span>\n          )}\n        </p>\n        <div>\n          <form onSubmit={searchSubmitHandler}>\n            <SearchBar\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter valid search.\"\n              onSearch={searchStateHandler}\n            />\n          </form>\n        </div>\n      </div>\n\n      {isLoading && (\n        <div className=\"center-text\">\n          <LoadingSpinner />\n        </div>\n      )}\n\n      {!isLoading && error && (\n        <p className=\"center-text no-data-found\">\n          Could not find any snap. Please try again.\n        </p>\n      )}\n\n      {!isLoading && !error && loadedSnaps && <SnapList items={loadedSnaps} />}\n    </div>\n  );\n};\n\nexport default SearchSnaps;\n"],"sourceRoot":""}
{"version":3,"sources":["shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["inputReducer","state","action","type","value","val","isValid","validate","validators","isTouched","Input","props","useReducer","initialValue","initialIsValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","formValidity","formState","inputHandler","useCallback","setFormData","inputData","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","style","display","accept","ref","pickedFile","fileIsValid","files","length","center","src","alt","secondary","onClick","current","click","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","switchModeHandler","name","undefined","image","motto","prevMode","authSubmitHandler","a","preventDefault","process","REACT_APP_BACKEND_URL","JSON","stringify","responseData","login","userId","token","formData","FormData","append","onClear","asOverlay","onSubmit","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse"],"mappings":"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","file":"static/js/6.d95a56c1.chunk.js","sourcesContent":["import { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\n\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\": {\n      return {\n        ...state,\n        isTouched: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialIsValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n  const touchHandler = () => {\n    dispatch({ type: \"TOUCH\" });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 5}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useReducer, useCallback } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        // FIXING 'NAME'/'IMAGE' COULD BE UNDEFINED WHEN IN LOG IN MODE\n\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.isValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, formValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: formValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      isValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport Button from \"./Button\";\nimport \"./ImageUpload.css\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg,.webp\"\n        ref={filePickerRef}\n        onChange={pickedHandler}\n      />\n      <div className={`${props.center && \"center-flex-column\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" secondary onClick={pickImageHandler}>\n          Pick image\n        </Button>\n        {!isValid && <p>{props.errorText}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import { Fragment, useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport \"./Auth.css\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  // ERROR HANDLING: useHttpClient() custom hook\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  // FORM STATES\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    // SIGNUP --> LOGIN\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n          motto: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    }\n    // LOGIN --> SIGNUP\n    if (isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n          motto: {\n            value: \"\",\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    // LOG IN\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-Type\": \"application/json\",\n          }\n        );\n\n        // SET LOGGED IN & ASSIGN USER ID TO AUTH CONTEXT USERID\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n\n    // SIGN UP\n    if (!isLoginMode) {\n      try {\n        // REQUEST BODY: FORMDATA\n        const formData = new FormData();\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"password\", formState.inputs.password.value);\n        formData.append(\"motto\", formState.inputs.motto.value);\n        formData.append(\"image\", formState.inputs.image.value);\n\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          \"POST\",\n          formData\n        );\n\n        // SET LOGGED IN & ASSIGN USER ID TO AUTH CONTEXT USERID\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication-form\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2 className=\"authentication-form-header\">Login Required</h2>\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <ImageUpload\n              id=\"image\"\n              center\n              errorText=\"\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"motto\"\n              type=\"motto\"\n              label=\"Motto\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a motto.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <p className=\"authentication-form-text\">\n              Example: Happiness is Travelling\n            </p>\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          {!isLoginMode && (\n            <p className=\"authentication-form-text\">\n              Example: John@company.com\n            </p>\n          )}\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(8)]}\n            errorText=\"Please enter a valid password, at least 8 characters.\"\n            placeholder={isLoginMode ? \"\" : \"Must be at least 8 characters\"}\n            onInput={inputHandler}\n          />\n          <div className=\"authentication-form-actions\">\n            <Button type=\"submit\" secondary disabled={!formState.isValid}>\n              {isLoginMode ? \"Login\" : \"Signup\"}\n            </Button>\n            {isLoginMode ? (\n              <Button\n                type=\"button\"\n                onClick={switchModeHandler}\n                inverse\n                secondary\n              >\n                Join now\n              </Button>\n            ) : (\n              <Button\n                type=\"button\"\n                onClick={switchModeHandler}\n                inverse\n                secondary\n              >\n                Switch to login\n              </Button>\n            )}\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}
{"version":3,"sources":["shared/components/FormElements/Input.js","shared/hooks/form-hook.js","snap/pages/UpdateSnap.js"],"names":["inputReducer","state","action","type","value","val","isValid","validate","validators","isTouched","Input","props","useReducer","initialValue","initialIsValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","formValidity","formState","inputHandler","useCallback","setFormData","inputData","UpdateSnap","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedSnap","setLoadedSnap","snapId","useParams","history","useHistory","title","description","fetchSnap","a","process","REACT_APP_BACKEND_URL","responseData","snap","snapUpdateSubmitHandler","preventDefault","JSON","stringify","Authorization","token","push","userId","onClear","onSubmit","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","secondary","disabled"],"mappings":"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","file":"static/js/8.f62efda5.chunk.js","sourcesContent":["import { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\n\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\": {\n      return {\n        ...state,\n        isTouched: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialIsValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n  const touchHandler = () => {\n    dispatch({ type: \"TOUCH\" });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 5}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useReducer, useCallback } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        // FIXING 'NAME'/'IMAGE' COULD BE UNDEFINED WHEN IN LOG IN MODE\n\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.isValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, formValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: formValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      isValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import { Fragment, useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './SnapForm.css';\n\nconst UpdateSnap = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedSnap, setLoadedSnap] = useState();\n  const snapId = useParams().snapId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n    },\n    true\n  );\n\n  useEffect(() => {\n    const fetchSnap = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/snaps/${snapId}`\n        );\n        setLoadedSnap(responseData.snap);\n        setFormData(\n          {\n            title: {\n              value: responseData.snap.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.snap.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchSnap();\n  }, [sendRequest, snapId, setFormData]);\n\n  const snapUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/snaps/${snapId}`,\n        'PATCH',\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n      history.push(`/${auth.userId}/snaps`);\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className='center-text'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedSnap && !error)\n    return (\n      <div className='center-text no-data-found'>\n        <p>Could not find snap!</p>\n      </div>\n    );\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedSnap && (\n        <Card className='snap-form'>\n          <form className='snap-form' onSubmit={snapUpdateSubmitHandler}>\n            <Input\n              id='title'\n              element='input'\n              type='text'\n              label='Title'\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText='Please enter a valid title.'\n              initialValue={loadedSnap.title}\n              initialIsValid={true}\n              onInput={inputHandler}\n            />\n            <Input\n              id='description'\n              element='textarea'\n              label='Description'\n              validators={[VALIDATOR_MINLENGTH(5)]}\n              errorText='Please enter a valid description (min. 5 characters).'\n              initialValue={loadedSnap.description}\n              initialIsValid={true}\n              onInput={inputHandler}\n            />\n            <Button secondary type='submit' disabled={!formState.isValid}>\n              Update snap\n            </Button>\n          </form>\n        </Card>\n      )}\n    </Fragment>\n  );\n};\n\nexport default UpdateSnap;\n"],"sourceRoot":""}